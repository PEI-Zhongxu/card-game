"""5664295
Constants Module
Defines constants used throughout the game.
"""

# Screen settings
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
TITLE = "Crazy Eights"
FPS = 60

# Card size
CARD_WIDTH = 71
CARD_HEIGHT = 96

# Card setting
PLAYER_HAND_Y = SCREEN_HEIGHT - CARD_HEIGHT - 20
COMPUTER_HAND_Y = 20
UP_CARD_X = SCREEN_WIDTH // 2 - CARD_WIDTH // 2
UP_CARD_Y = SCREEN_HEIGHT // 2 - CARD_HEIGHT // 2

# Resource path
ASSET_DIR = "assets" 



"""
Deck Module
Implements the Deck class for managing a collection of cards.
"""
import random
from typing import List, Optional
from src.card import Card, Suit, Rank

class Deck:
    """
    A deck of playing cards.
    
    Attributes:
        cards (List[Card]): The list of cards in the deck
    """
    
    def __init__(self):
        """Initialize a new deck with all 52 cards."""
        self.cards: List[Card] = [
            Card(suit, rank)
            for suit in Suit
            for rank in Rank
        ]
    
    def shuffle(self):
        """Shuffle the deck."""
        random.shuffle(self.cards)
    
    def deal(self, num_cards: int) -> List[Card]:
        """
        Deal a number of cards from the deck.
        
        Args:
            num_cards (int): The number of cards to deal
            
        Returns:
            List[Card]: The dealt cards
            
        Raises:
            ValueError: If there are not enough cards in the deck
        """
        if len(self.cards) < num_cards:
            raise ValueError("Not enough cards in the deck")
        
        dealt_cards = []
        for _ in range(num_cards):
            dealt_cards.append(self.cards.pop())
        return dealt_cards
    
    def draw(self) -> Optional[Card]:
        """
        Draw a single card from the deck.
        
        Returns:
            Optional[Card]: The drawn card, or None if the deck is empty
        """
        if not self.cards:
            return None
        return self.cards.pop()
    
    def add_card(self, card: Card):
        """
        Add a card to the deck.
        
        Args:
            card (Card): The card to add
        """
        self.cards.append(card)
    
    def add_cards(self, cards: List[Card]):
        """
        Add multiple cards to the deck.
        
        Args:
            cards (List[Card]): The cards to add
        """
        self.cards.extend(cards)
    
    def is_empty(self) -> bool:
        """
        Check if the deck is empty.
        
        Returns:
            bool: True if the deck is empty, False otherwise
        """
        return len(self.cards) == 0
    
    def __len__(self) -> int:
        """Get the number of cards in the deck."""
        return len(self.cards)
    
    def __str__(self) -> str:
        """Get a string representation of the deck."""
        return f"Deck with {len(self)} cards" 
