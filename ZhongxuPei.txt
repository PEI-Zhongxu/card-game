# ---------------------- 自定义数据结构 ----------------------
class PriorityDeck:
    """基于优先队列的牌堆管理系统（替换原生deque）"""
    def __init__(self):
        self.heap = []
        self.counter = 0  # 解决相同优先级元素的比较问题

    def push(self, card: 'Card', priority: int = 0) -> None:
        """添加卡牌到优先队列"""
        heappush(self.heap, (priority, self.counter, card))
        self.counter += 1

    def pop(self) -> 'Card':
        """从队列中取出最高优先级的卡牌"""
        return heappop(self.heap)[-1] if self.heap else None

    def __len__(self) -> int:
        return len(self.heap)


class DecisionGraph:
    """基于图结构的AI决策优化系统"""
    def __init__(self, game_state: 'CrazyEightsGame'):
        self.graph = defaultdict(list)
        self.build_graph(game_state)

    def build_graph(self, state: 'CrazyEightsGame') -> None:
        """构建游戏状态决策图（简化示例）"""
        for card in state.c_hand:
            simulated_state = self.simulate_play(state, card)
            self.graph[state].append((simulated_state, card))

    def find_optimal_play(self) -> Optional['Card']:
        """使用BFS寻找最优出牌策略（示例逻辑）"""
        queue = deque([(self.graph[state], 0) for state in self.graph])
        best_card = None
        max_score = -float('inf')
        
        while queue:
            current_state, depth = queue.popleft()
            for next_state, card in current_state:
                score = self.evaluate_state(next_state)
                if score > max_score:
                    max_score = score
                    best_card = card
                if depth < 2:  # 限制搜索深度
                    queue.append((self.graph[next_state], depth + 1))
        return best_card

    @staticmethod
    def evaluate_state(state: 'CrazyEightsGame') -> int:
        """评估游戏状态得分"""
        return sum(c.value for c in state.c_hand) - sum(p.value for p in state.p_hand)

    @staticmethod
    def simulate_play(state: 'CrazyEightsGame', card: 'Card') -> 'CrazyEightsGame':
        """模拟出牌后的新状态"""
        new_state = CrazyEightsGame()
        new_state.__dict__ = state.__dict__.copy()
        new_state.c_hand.remove(card)
        new_state.up_card = card
        new_state.active_suit = card.suit
        return new_state


# ---------------------- 核心游戏逻辑 ----------------------
class Card:
    """单张扑克牌的类，包含花色、点数和特殊规则"""
    def __init__(self, suit_id: int, rank_id: int) -> None:
        self.suit_id = suit_id
        self.rank_id = rank_id

        # 自动计算牌面属性
        self.rank, self.value = self._determine_rank_value()
        self.suit = self._determine_suit()
        
        # 生成显示名称
        self.short_name = f"{self.rank[0]}{self.suit[0]}" if self.rank != '10' else f"{self.rank}{self.suit[0]}"
        self.long_name = f"{self.rank} of {self.suit}"

    def _determine_rank_value(self) -> Tuple[str, int]:
        """确定牌面点数和对应的游戏分值"""
        if self.rank_id == 1:
            return "Ace", 1
        elif 2 <= self.rank_id <= 10:
            return str(self.rank_id), self.rank_id
        elif self.rank_id == 8:
            return "8", 50  # 特殊规则：8的分数值为50
        return {11: ("Jack", 10), 12: ("Queen", 10), 13: ("King", 10)}.get(self.rank_id, ("RankError", -1))

    def _determine_suit(self) -> str:
        """将数字ID转换为花色名称"""
        return {1: "Diamonds", 2: "Hearts", 3: "Spades", 4: "Clubs"}.get(self.suit_id, "SuitError")

    def __repr__(self) -> str:
        return self.short_name


class CrazyEightsGame:
    """主游戏类，管理游戏状态和流程"""
    def __init__(self) -> None:
        self.deck: PriorityDeck = PriorityDeck()
        self.p_hand: List[Card] = []
        self.c_hand: List[Card] = []
        self.up_card: Optional[Card] = None
        self.active_suit: str = ""
        self.blocked: int = 0
        self._init_logging()

    def _init_logging(self) -> None:
        """初始化日志系统"""
        logging.basicConfig(
            filename='crazy8.log',
            level=logging.DEBUG,
            format='%(asctime)s - %(levelname)s - %(message)s'
        )

    # ---------------------- 牌堆管理 ----------------------
    def _custom_shuffle(self, deck: List[Card]) -> List[Card]:
        """Fisher-Yates洗牌算法（替换random.shuffle）"""
        for i in range(len(deck)-1, 0, -1):
            j = random.randint(0, i)
            deck[i], deck[j] = deck[j], deck[i]
        return deck

    def init_deck(self) -> None:
        """初始化并洗牌"""
        raw_deck = []
        for suit_id in range(1, 5):
            for rank_id in range(1, 14):
                raw_deck.append(Card(suit_id, rank_id))
        self._custom_shuffle(raw_deck)
        
        self.deck = PriorityDeck()
        for card in raw_deck:
            self.deck.push(card, random.randint(1, 100))  # 使用优先队列

    # ---------------------- 游戏流程 ----------------------
    def deal_hands(self) -> None:
        """发牌逻辑"""
        self.p_hand = [self.deck.pop() for _ in range(5)]
        self.c_hand = [self.deck.pop() for _ in range(5)]
        self.up_card = self.deck.pop()
        self.active_suit = self.up_card.suit
        logging.info(f"New round started. Up card: {self.up_card}")

    def _validate_move(self, card: Card) -> bool:
        """验证出牌合法性"""
        return any([
            card.rank == '8',
            card.suit == self.active_suit,
            card.rank == self.up_card.rank
        ])

    # ---------------------- 玩家回合 ----------------------
    def player_turn(self) -> None:
        """处理玩家回合"""
        print("\nYour hand:", ", ".join(card.short_name for card in self.p_hand))
        print("Up card:", self.up_card.short_name, f"(Active suit: {self.active_suit})")

        while True:
            try:
                move = input("Play a card (e.g. '8H') or 'draw': ").strip().upper()
                if move == 'DRAW':
                    self._handle_draw(self.p_hand)
                    return

                selected = next((c for c in self.p_hand if c.short_name == move), None)
                if not selected:
                    raise ValueError("Card not in hand")
                if not self._validate_move(selected):
                    raise ValueError("Invalid move")

                self._apply_play(selected, self.p_hand)
                if selected.rank == '8':
                    self._change_suit()
                return

            except (ValueError, StopIteration) as e:
                logging.warning(f"Invalid player input: {str(e)}")
                print(f"Error: {str(e)}. Please try again.")

    # ---------------------- 电脑AI ----------------------
    def computer_turn(self) -> None:
        """使用决策图优化电脑出牌"""
        logging.info("Computer's turn started")
        graph = DecisionGraph(self)
        best_play = graph.find_optimal_play()

        if best_play:
            self._apply_play(best_play, self.c_hand)
            print(f"Computer played {best_play.short_name}")
        else:
            self._handle_draw(self.c_hand)
            print("Computer drew a card")

    # ---------------------- 辅助方法 ----------------------
    def _handle_draw(self, hand: List[Card]) -> None:
        """处理抽牌逻辑"""
        if card := self.deck.pop():
            hand.append(card)
            logging.info(f"Player drew: {card}")
        else:
            self.blocked += 1
            logging.warning("Deck is empty")

    def _apply_play(self, card: Card, hand: List[Card]) -> None:
        """应用出牌操作"""
        hand.remove(card)
        self.up_card = card
        self.active_suit = card.suit
        logging.debug(f"Played: {card}")

    def _change_suit(self) -> None:
        """玩家出8后更换花色"""
        suit_map = {'D': 'Diamonds', 'H': 'Hearts', 'S': 'Spades', 'C': 'Clubs'}
        while True:
            choice = input("Choose new suit [D/H/S/C]: ").upper()
            if choice in suit_map:
                self.active_suit = suit_map[choice]
                logging.info(f"Suit changed to {self.active_suit}")
                print(f"New active suit: {self.active_suit}")
                return
            print("Invalid choice. Please try again.")

    # ---------------------- 游戏循环 ----------------------
    def play_game(self) -> None:
        """主游戏循环"""
        rounds = random.randint(3, 5)
        print(f"Starting {rounds}-round game!")
        total_scores = {'Player': 0, 'Computer': 0}

        for round_num in range(1, rounds+1):
            print(f"\n=== Round {round_num} ===")
            self.init_deck()
            self.deal_hands()
            self.blocked = 0

            while self.p_hand and self.c_hand and self.blocked < 2:
                self.player_turn()
                if not self.p_hand: break
                self.computer_turn()

            # 计算得分
            p_score = sum(c.value for c in self.c_hand)
            c_score = sum(c.value for c in self.p_hand)
            total_scores['Player'] += p_score
            total_scores['Computer'] += c_score

        # 显示最终结果
        print("\n=== Final Scores ===")
        print(f"Player: {total_scores['Player']}")
        print(f"Computer: {total_scores['Computer']}")
        if total_scores['Player'] > total_scores['Computer']:
            print("🎉 You win the game!")
        else:
            print("🤖 Computer wins the game!")


if __name__ == "__main__":
    try:
        CrazyEightsGame().play_game()
    except Exception as e:
        logging.critical(f"Game crashed: {str(e)}", exc_info=True)
        print("A critical error occurred. Check crazy8.log for details.")
